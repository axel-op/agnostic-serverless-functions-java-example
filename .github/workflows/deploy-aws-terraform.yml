name: Deploy on AWS with Terraform

on:
  push:
    branches:
      - main
    paths:
      - "**/src/main/**"
      - "**/pom.xml"
      - ".github/workflows/package.yml"
      - ".github/workflows/deploy-aws-terraform.yml"

jobs:
  package:
    uses: ./.github/workflows/package.yml
    with:
      function-name: agnostic-function-test-terraform
      provider: aws
    secrets:
      maven-username: ${{ secrets.MAVEN_USERNAME }}
      maven-password: ${{ secrets.MAVEN_PASSWORD }}

  deploy:
    runs-on: ubuntu-latest
    needs: package
    outputs:
      url: ${{ steps.deploy.outputs.url }}
    permissions:
      id-token: write # This is required for requesting the JWT
    env:
      function-name: agnostic-function-test-terraform
      region: eu-west-3
      tf-url-output: function_url
    steps:
      - uses: actions/checkout@v3
      - name: Download deployment directory
        id: download
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.package.outputs.deployment-directory-artifact }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.region }}
      - name: Install and configure Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
      - name: Deploy
        working-directory: ./terraform/aws
        id: deploy
        env:
          TF_VAR_region: ${{ env.region }}
          TF_VAR_function_name: ${{ env.function-name }}
        run: |
          export TF_VAR_deployment_file=$(find ${{ steps.download.outputs.download-path }} | grep '.jar$')
          terraform init
          terraform apply --auto-approve
          echo "url=$(terraform output --raw ${{ env.tf-url-output }})" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Test deployed function
        env:
          URL: ${{ needs.deploy.outputs.url }}
        run: |
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" $URL)
          if [[ "$STATUS_CODE" != 2* ]]; then
            echo "Invalid status code: $STATUS_CODE"
            exit 1
          fi
